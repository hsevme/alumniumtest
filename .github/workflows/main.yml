name: 🚦 Run Tests and Generate Allure Report

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '5,20,35,50 * * * *'  # every 15 minutes, starting at h:05

env:
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  ALUMNIUM_MODEL: ${{ vars.ALUMNIUM_MODEL }}
  ALLURE_RESULTS_DIR: allure-results
  ALLURE_REPORT_DIR: allure-report

jobs:
  test:
    name: 🧪 Prepare and Run Tests
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.restore_cache.outputs.cache-hit }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Dependencies
        run: |
          echo  "ALUMNIUM MODEL: "$ALUMNIUM_MODEL
          sudo apt update
          sudo apt install -y ffmpeg curl unzip xvfb
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps

      - name: 🖥️ Start Virtual Display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: ♻️ Restore SQLite Cache
        id: restore_cache
        uses: actions/cache@v4
        with:
          path: .alumnium-cache.sqlite
          key: sqlite-cache-${{ runner.os }}
          restore-keys: sqlite-cache-

      - name: 🚀 Run Behave Tests with Allure
        run: |
          behave -f allure_behave.formatter:AllureFormatter -o allure-results

      - name: Check cache
        run: |
          ls -als

      - name: 💾 Save SQLite Cache
        if: always()
        uses: actions/cache@v4
        with:
          path: .alumnium-cache.sqlite
          key: sqlite-cache-${{ runner.os }}-${{ github.run_id }}

      - name: 📂 Upload Playwright Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: artifacts

      - name: 📦 Upload Raw Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: 📥 Checkout Code
        if: always()
        uses: actions/checkout@v4

      - name: 📥 Download Allure Results
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: 📥 Download Previous Allure History
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: allure-results/history

      - name: 🧾 Generate Allure Report
        if: always()
        run: |
          npm install -g allure-commandline --save-dev
          allure generate allure-results -o allure-report --clean

      - name: 📤 Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: 📤 Upload Allure History
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: allure-report/history

      - name: 📥 Download Allure Report
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: 🌐 Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
          keep_files: false